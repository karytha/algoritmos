import React, { useState } from "react";
// import { P, O, B, MI, M, Feromonios } from "../Components/dados";
export const P = [
  [
    0,
    0.22155,

    0.3943,

    0.5695,

    0.45945,

    0.524,

    0.519,

    0.5575,

    0.636,

    0.659,

    0.6725,

    0.7235,

    0.713,

    0.644,

    0.8883,

    0.265,
  ],
  [
    0.22155,
    0,
    0.17845,
    0.3541,
    0.2383,
    0.30335,
    0.30385,
    0.33905,
    0.42045,
    0.4425,
    0.4552,
    0.509,
    0.502,
    0.43375,
    0.681,
    0.07745,
  ],
  [
    0.3943,
    0.17845,
    0,
    0.17595,
    0.07965,
    0.13395,
    0.1963,
    0.2102,
    0.29605,
    0.3127,
    0.32075,
    0.38225,
    0.38565,
    0.32445,
    0.65,
    0.18595,
  ],
  [
    0.5695,
    0.3541,
    0.17595,
    0,
    0.37845,
    0.07485,
    0.14935,
    0.17825,
    0.235,
    0.23785,
    0.23565,
    0.2976,
    0.31615,
    0.279,
    0.4753,
    0.35035,
  ],
  [
    0.45945,
    0.2383,
    0.07965,
    0.37845,
    0,
    0.2221,
    0.12655,
    0.13235,
    0.21745,
    0.2323,
    0.24115,
    0.3029,
    0.3074,
    0.3221,
    0.48595,
    0.2221,
  ],
  [
    0.524,
    0.30335,
    0.13395,
    0.07485,
    0.2221,
    0,
    0.1361,
    0.1173,
    0.1907,
    0.20065,
    0.20395,
    0.2677,
    0.279,
    0.2299,
    0.4511,
    0.28805,
  ],
  [
    0.519,
    0.30385,
    0.1963,
    0.14935,
    0.12655,
    0.1361,
    0,
    0.048045,
    0.117,
    0.4101,
    0.1545,
    0.20525,
    0.19945,
    0.1328,
    0.34435,
    0.25555,
  ],
  [
    0.5575,
    0.33905,
    0.2102,
    0.17825,
    0.13235,
    0.1173,
    0.048045,
    0,
    0.08615,
    0.1164,
    0.0638,
    0.174,
    0.25755,
    0.11665,
    0.35515,
    0.2968,
  ],
  [
    0.636,
    0.42045,
    0.29605,
    0.235,
    0.21745,
    0.1907,
    0.117,
    0.08615,
    0,
    0.025025,
    0.04258,
    0.17545,
    0.09005,
    0.04607,
    0.26905,
    0.37195,
  ],
  [
    0.659,
    0.4425,
    0.3127,
    0.23785,
    0.2323,
    0.20065,
    0.4101,
    0.1164,
    0.025025,
    0,
    0.01811,
    0.06955,
    0.07895,
    0.05795,
    0.2528,
    0.39555,
  ],
  [
    0.6725,
    0.4552,
    0.32075,
    0.23565,
    0.24115,
    0.20395,
    0.1545,
    0.174,
    0.04258,
    0.01811,
    0,
    0.0638,
    0.08115,
    0.074,
    0.2473,
    0.41,
  ],
  [
    0.7235,
    0.509,
    0.38225,
    0.2976,
    0.3029,
    0.2677,
    0.20525,
    0.17545,
    0.0889,
    0.06955,
    0.0638,
    0,
    0.034785,
    0.08605,
    0.1838,
    0.45885,
  ],
  [
    0.713,
    0.502,
    0.38565,
    0.31615,
    0.3074,
    0.279,
    0.19945,
    0.25755,
    0.09005,
    0.07895,
    0.08115,
    0.034785,
    0,
    0.06915,
    0.1806,
    0.44795,
  ],
  [
    0.644,
    0.43375,
    0.32445,
    0.279,
    0.3221,
    0.2299,
    0.1328,
    0.11665,
    0.04607,
    0.05795,
    0.074,
    0.08605,
    0.06915,
    0,
    0.2476,
    0.3788,
  ],
  [
    0.888,
    0.681,
    0.565,
    0.4753,
    0.48595,
    0.4511,
    0.34435,
    0.35515,
    0.26905,
    0.2528,
    0.2473,
    0.1838,
    0.1806,
    0.2476,
    0,
    0.6235,
  ],
  [
    0.265,
    0.07745,
    0.18595,
    0.35035,
    0.2221,
    0.28805,
    0.25555,
    0.2968,
    0.37195,
    0.39555,
    0.41,
    0.45885,
    0.44795,
    0.3788,
    0.6235,
    0,
  ],
];

export const O = [
  [
    0,
    0.01477,
    0.0262866666666667,
    0.0379666666666667,
    0.03063,
    0.0349333333333333,
    0.0346,
    0.0371666666666667,
    0.0424,
    0.0439333333333333,
    0.0448333333333333,
    0.0482333333333333,
    0.0475333333333333,
    0.0429333333333333,
    0.05922,
    0.0176666666666667,
  ],
  [
    0.01477,
    0,
    0.0118966666666667,
    0.0236066666666667,
    0.0158866666666667,
    0.0202233333333333,
    0.0202566666666667,
    0.0226033333333333,
    0.02803,
    0.0295,
    0.0303466666666667,
    0.0339333333333333,
    0.0334666666666667,
    0.0289166666666667,
    0.0454,
    0.00516333333333333,
  ],
  [
    0.0262866666666667,
    0.0118966666666667,
    0,
    0.01173,
    0.00531,
    0.00893,
    0.0130866666666667,
    0.0140133333333333,
    0.0197366666666667,
    0.0208466666666667,
    0.0213833333333333,
    0.0254833333333333,
    0.02571,
    0.02163,
    0.0433333333333333,
    0.0123966666666667,
  ],
  [
    0.0379666666666667,
    0.0236066666666667,
    0.01173,
    0,
    0.02523,
    0.00499,
    0.00995666666666667,
    0.0118833333333333,
    0.0156666666666667,
    0.0158566666666667,
    0.01571,
    0.01984,
    0.0210766666666667,
    0.0186,
    0.0316866666666667,
    0.0233566666666667,
  ],
  [
    0.03063,
    0.0158866666666667,
    0.00531,
    0.02523,
    0,
    0.0148066666666667,
    0.00843666666666667,
    0.00882333333333333,
    0.0144966666666667,
    0.0154866666666667,
    0.0160766666666667,
    0.0201933333333333,
    0.0204933333333333,
    0.0214733333333333,
    0.0323966666666667,
    0.0148066666666667,
  ],
  [
    0.0349333333333333,
    0.0202233333333333,
    0.00893,
    0.00499,
    0.0148066666666667,
    0,
    0.00907333333333333,
    0.00782,
    0.0127133333333333,
    0.0133766666666667,
    0.0135966666666667,
    0.0178466666666667,
    0.0186,
    0.0153266666666667,
    0.0300733333333333,
    0.0192033333333333,
  ],
  [
    0.0346,
    0.0202566666666667,
    0.0130866666666667,
    0.00995666666666667,
    0.00843666666666667,
    0.00907333333333333,
    0,
    0.003203,
    0.0078,
    0.02734,
    0.0103,
    0.0136833333333333,
    0.0132966666666667,
    0.00885333333333333,
    0.0229566666666667,
    0.0170366666666667,
  ],
  [
    0.0371666666666667,
    0.0226033333333333,
    0.0140133333333333,
    0.0118833333333333,
    0.00882333333333333,
    0.00782,
    0.003203,
    0,
    0.00574333333333333,
    0.00776,
    0.00425333333333333,
    0.0116,
    0.01717,
    0.00777666666666667,
    0.0236766666666667,
    0.0197866666666667,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    0.0482333333333333,
    0.0339333333333333,
    0.0254833333333333,
    0.01984,
    0.0201933333333333,
    0.0178466666666667,
    0.0136833333333333,
    0.0116966666666667,
    0.00592666666666667,
    0.0046366,
    0.00425333333333333,
    0,
    0.002319,
    0.00573666666666667,
    0.0122533333333333,
    0.03059,
  ],
  [
    0.0475333333333333,
    0.0334666666666667,
    0.02571,
    0.0210766666666667,
    0.0204933333333333,
    0.0186,
    0.0132966666666667,
    0.01717,
    0.00600333333333333,
    0.00526333333333333,
    0.00541,
    0.002319,
    0,
    0.00461,
    0.01204,
    0.0298633333333333,
  ],
  [
    0.0429333333333333,
    0.0289166666666667,
    0.02163,
    0.0186,
    0.0214733333333333,
    0.0153266666666667,
    0.00885333333333333,
    0.00777666666666667,
    0.00307133333333333,
    0.00386333333333333,
    0.00493333333333333,
    0.00573666666666667,
    0.00461,
    0,
    0.0165066666666667,
    0.0252533333333333,
  ],
  [
    0.0592,
    0.0454,
    0.0376666666666667,
    0.0316866666666667,
    0.0323966666666667,
    0.0300733333333333,
    0.0229566666666667,
    0.0236766666666667,
    0.0179366666666667,
    0.0168533333333333,
    0.0164866666666667,
    0.0122533333333333,
    0.01204,
    0.0165066666666667,
    0,
    0.0415666666666667,
  ],
  [
    0.0176666666666667,
    0.00516333333333333,
    0.0123966666666667,
    0.0233566666666667,
    0.0148066666666667,
    0.0192033333333333,
    0.0170366666666667,
    0.0197866666666667,
    0.0247966666666667,
    0.02637,
    0.0273333333333333,
    0.03059,
    0.0298633333333333,
    0.0252533333333333,
    0.0415666666666667,
    0,
  ],
];
export const B = [
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    0,
    0.023653125,
    0.004678125,
    0.009334375,
    0.011140625,
    0.0146875,
    0.014865625,
    0.014728125,
    0.0186,
    0.019759375,
    0.0174375,
    0.02970625,
    0.021896875,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    0.0186,
    0.01893125,
    0.01673125,
    0.012828125,
    0.010965625,
    0.00555625,
    0.004368,
    0.0039875,
    0,
    0.0021740625,
    0.005378125,
    0.0114875,
    0.028678125,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
  ],
  [
    100,
    100,
    100,
    0.021896875,
    0.01388125,
    0.018003125,
    0.015971875,
    0.01855,
    0.023246875,
    0.024721875,
    0.025625,
    0.028678125,
    0.027996875,
    0.023675,
    0.03896875,
    0,
  ],
];

export const M = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
];

export const MI = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
];

export const Feromonios = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
];

for (var i = 0; i < P.length; i++) {
  for (var h = 0; h < P.length; h++) {
    M[i][h] = Math.min(P[i][h], B[i][h], O[i][h]);
  }
}

for (let i = 0; i < P.length; i++) {
  for (let h = 0; h < P.length; h++) {
    if (P[i][h] <= B[i][h] && P[i][h] <= O[i][h]) {
      MI[i][h] = P[i][h] + "P";
    }
    if (B[i][h] < P[i][h] && B[i][h] <= O[i][h]) {
      MI[i][h] = B[i][h] + "B";
    }
    if (O[i][h] < B[i][h] && O[i][h] < P[i][h]) {
      MI[i][h] = O[i][h] + "O";
    }
  }
}

// partida = { latitude: 0, longitude: 1 } chegada = { latitude: 0, longitude: 1 }
// function distancia(partida, chegada) {
//   var dGrau = Math.sqrt(
//     Math.pow(partida.longitude + partida.latitude, 2) +
//       Math.pow(chegada.longitude - chegada.latitude, 2)
//   );
//   var d = (40030000 * dGrau) / 360;
//   return d;
// }

function medirRota(partida, caminho) {
  var tempo = 0;
  var posAtual = partida,
    proxPasso = caminho[0];
  tempo += M[posAtual][proxPasso];
  for (var i = 0; i < caminho.length - 1; i++) {
    posAtual = proxPasso;
    proxPasso = caminho[i + 1];
    tempo += M[posAtual][proxPasso];
  }
  return tempo;
}

function atribuirFeromonio(tempo) {
  return 1 - tempo;
}

function evaporarFeromonio() {
  var maximoFeromonio = 0;
  var mediaFeromonio = 0;
  var taxaDeEvaporacao = 0.05;
  var count = 0;
  for (let i = 0; i < Feromonios.length; i++) {
    for (let h = 0; h < Feromonios[0].length; h++) {
      maximoFeromonio += Feromonios[i][h];
      count++;
    }
  }
  mediaFeromonio = maximoFeromonio / count;
  for (let i = 0; i < Feromonios.length; i++) {
    for (let h = 0; h < Feromonios[0].length; h++) {
      Feromonios[i][h] -= mediaFeromonio * taxaDeEvaporacao;
      if (Feromonios[i][h] < 0) Feromonios[i][h] = 0;
    }
  }
}

function escolherProximoPasso(posicaoAtual, caminho) {
  var possibilidades = [];

  M[posicaoAtual].map((i) => {
    if (i === posicaoAtual || caminho.includes(i)) {
      if (M[posicaoAtual][i] >= 0) {
        possibilidades.push(i);
      }
    }
  });
  for (let i = 0; i < M[posicaoAtual].length; i++) {
    if (i === posicaoAtual || caminho.includes(i)) continue;
    if (M[posicaoAtual][i] >= 0) {
      possibilidades.push(i);
    }
  }
  var chanceTotal = 0;
  var chancePossibilidade = [];
  for (let i = 0; i < possibilidades.length; i++) {
    var feromonio = Feromonios[posicaoAtual][possibilidades[i]];
    if (feromonio <= 0) feromonio = 1;
    chancePossibilidade.push(chanceTotal + feromonio);
    chanceTotal += feromonio;
  }
  var roleta = Math.random() * chanceTotal;
  var escolhido = possibilidades[0];
  for (let i = 0; i < possibilidades.length; i++) {
    if (roleta < chancePossibilidade[i]) {
      escolhido = possibilidades[i];
      break;
    }
  }
  return escolhido;
}

//indices dos pr�dios
function colonia(partida, chegada) {
  var melhorTempo = 1000000000;
  var melhorCaminho = [];
  for (var formiga = 0; formiga < 50; formiga++) {
    var posicaoAtual = partida;
    var caminho = [];
    while (posicaoAtual !== chegada) {
      var proximoPasso = escolherProximoPasso(posicaoAtual, caminho);
      posicaoAtual = proximoPasso;
      caminho.push(proximoPasso);
    }
    var tempo = medirRota(partida, caminho);
    if (tempo < melhorTempo) {
      melhorTempo = tempo;
      melhorCaminho = caminho;
    }
    // colocar feromonio
    var posAtual = posicaoAtual,
      proxPasso = caminho[0];
    Feromonios[posAtual][proxPasso] += atribuirFeromonio(tempo);
    for (var i = 0; i < caminho.length - 1; i++) {
      posAtual = proxPasso;
      proxPasso = caminho[i + 1];
      Feromonios[posAtual][proxPasso] += atribuirFeromonio(tempo);
    }
    evaporarFeromonio();
  }
  console.log(
    "Melhor tempo: " + melhorTempo + "\nMelhor caminho: " + melhorCaminho
  );
  return { melhorTempo, melhorCaminho };
}

const Colônia = () => {
  const [caminho, setCaminho] = useState([]);
  const [tempo, setTempo] = useState(0);
  const [show, setShow] = useState(false);
  const [partida, setPartida] = useState(0);
  const [destino, setDestino] = useState(0);

  const handleChange = (A, B) => {
    const rota = colonia(A, B);

    console.log(A, B);
    setCaminho(rota.melhorCaminho);
    setTempo(rota.melhorTempo);
    setShow(true);
  };
  console.log(caminho, tempo);
  console.log(partida, destino);
  return (
    <div>
      <form onSubmit={() => handleChange(partida, destino)}>
        <input
          type="text"
          size={20}
          //   name={partida}
          onChange={(e) => setPartida(e.target.value)}
        />
        <input
          type="text"
          size={20}
          //   name={destino}
          onChange={(e) => setDestino(e.target.value)}
        />
        <button
          type="submit"
          onClick={(e) => {
            e.preventDefault();
            handleChange(partida, destino);
          }}
        >
          {" "}
          Enviar
        </button>
      </form>

      {show ? (
        <div>
          Caminho: {caminho}
          Melhor tempo: {tempo}
        </div>
      ) : (
        <div />
      )}
    </div>
  );
};

export default Colônia;
