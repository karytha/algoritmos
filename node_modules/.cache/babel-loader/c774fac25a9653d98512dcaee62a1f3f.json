{"ast":null,"code":"var _jsxFileName = \"/Users/karytha/Projetos/Karytha/IA/algoritmos/src/ColoniaDeFormigas/index.js\";\nimport React, { useState } from \"react\";\nimport { P, O, B, MI, M, Feromonios } from \"../Components/dados\";\n\nfor (var i = 0; i < P.length; i++) {\n  for (var h = 0; h < P.length; h++) {\n    M[i][h] = Math.min(P[i][h], B[i][h], O[i][h]);\n  }\n}\n\nfor (var i = 0; i < P.length; i++) {\n  for (var h = 0; h < P.length; h++) {\n    if (P[i][h] <= B[i][h] && P[i][h] <= O[i][h]) {\n      MI[i][h] = P[i][h] + \"P\";\n    }\n\n    if (B[i][h] < P[i][h] && B[i][h] <= O[i][h]) {\n      MI[i][h] = B[i][h] + \"B\";\n    }\n\n    if (O[i][h] < B[i][h] && O[i][h] < P[i][h]) {\n      MI[i][h] = O[i][h] + \"O\";\n    }\n  }\n} // partida = { latitude: 0, longitude: 1 } chegada = { latitude: 0, longitude: 1 }\n\n\nfunction distancia(partida, chegada) {\n  var dGrau = Math.sqrt(Math.pow(partida.longitude + partida.latitude, 2) + Math.pow(chegada.longitude - chegada.latitude, 2));\n  var d = 40030000 * dGrau / 360;\n  return d;\n}\n\nfunction medirRota(partida, caminho) {\n  var tempo = 0;\n  var posAtual = partida,\n      proxPasso = caminho[0];\n  tempo += M[posAtual][proxPasso];\n\n  for (var i = 0; i < caminho.length - 1; i++) {\n    posAtual = proxPasso;\n    proxPasso = caminho[i + 1];\n    tempo += M[posAtual][proxPasso];\n  }\n\n  return tempo;\n}\n\nfunction atribuirFeromonio(tempo) {\n  return 1 - tempo;\n}\n\nfunction evaporarFeromonio() {\n  var maximoFeromonio = 0;\n  var mediaFeromonio = 0;\n  var taxaDeEvaporacao = 0.05;\n  var count = 0;\n\n  for (var i = 0; i < Feromonios.length; i++) {\n    for (var h = 0; h < Feromonios[0].length; h++) {\n      maximoFeromonio += Feromonios[i][h];\n      count++;\n    }\n  }\n\n  mediaFeromonio = maximoFeromonio / count;\n\n  for (var i = 0; i < Feromonios.length; i++) {\n    for (var h = 0; h < Feromonios[0].length; h++) {\n      Feromonios[i][h] -= mediaFeromonio * taxaDeEvaporacao;\n      if (Feromonios[i][h] < 0) Feromonios[i][h] = 0;\n    }\n  }\n}\n\nfunction escolherProximoPasso(posicaoAtual, caminho) {\n  var possibilidades = [];\n\n  for (var i = 0; i < M[posicaoAtual].length; i++) {\n    if (i === posicaoAtual || caminho.includes(i)) continue;\n\n    if (M[posicaoAtual][i] >= 0) {\n      possibilidades.push(i);\n    }\n  }\n\n  var chanceTotal = 0;\n  var chancePossibilidade = [];\n\n  for (var i = 0; i < possibilidades.length; i++) {\n    var feromonio = Feromonios[posicaoAtual][possibilidades[i]];\n    if (feromonio <= 0) feromonio = 1;\n    chancePossibilidade.push(chanceTotal + feromonio);\n    chanceTotal += feromonio;\n  }\n\n  var roleta = Math.random() * chanceTotal;\n  var escolhido = possibilidades[0];\n\n  for (var i = 0; i < possibilidades.length; i++) {\n    if (roleta < chancePossibilidade[i]) {\n      escolhido = possibilidades[i];\n      break;\n    }\n  }\n\n  return escolhido;\n} //indices dos pr�dios\n\n\nfunction colonia(partida, chegada) {\n  var melhorTempo = 1000000000;\n  var melhorCaminho = [];\n\n  for (var formiga = 0; formiga < 50; formiga++) {\n    var posicaoAtual = partida;\n    var caminho = [];\n\n    while (posicaoAtual !== chegada) {\n      var proximoPasso = escolherProximoPasso(posicaoAtual, caminho);\n      posicaoAtual = proximoPasso;\n      caminho.push(proximoPasso);\n    }\n\n    var tempo = medirRota(partida, caminho);\n\n    if (tempo < melhorTempo) {\n      melhorTempo = tempo;\n      melhorCaminho = caminho;\n    } // colocar feromonio\n\n\n    var posAtual = posicaoAtual,\n        proxPasso = caminho[0];\n    Feromonios[posAtual][proxPasso] += atribuirFeromonio(tempo);\n\n    for (var i = 0; i < caminho.length - 1; i++) {\n      posAtual = proxPasso;\n      proxPasso = caminho[i + 1];\n      Feromonios[posAtual][proxPasso] += atribuirFeromonio(tempo);\n    }\n\n    evaporarFeromonio();\n  }\n\n  console.log(\"Melhor tempo: \" + melhorTempo + \"\\nMelhor caminho: \" + melhorCaminho);\n  return {\n    melhorTempo,\n    melhorCaminho\n  };\n}\n\nconst Colônia = () => {\n  const [caminho, setCaminho] = useState([]);\n  const [tempo, setTempo] = useState(0);\n  const [show, setShow] = useState(false);\n  const [partida, setPartida] = useState(0);\n  const [destino, setDestino] = useState(0);\n\n  const handleChange = async (A, B) => {\n    const rota = await colonia(A, B);\n    setCaminho(rota.melhorCaminho);\n    setTempo(rota.melhorTempo);\n    setShow(true);\n    console.log(caminho, tempo);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    size: 20 //   name={partida}\n    ,\n    onChange: e => setPartida(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    size: 20 //   name={destino}\n    ,\n    onChange: e => setDestino(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    onSubmit: () => handleChange(partida, destino),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, \" \", \"Enviar\")), show ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, \"Caminho: \", caminho, \"Melhor tempo: \", tempo) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Colônia;","map":{"version":3,"sources":["/Users/karytha/Projetos/Karytha/IA/algoritmos/src/ColoniaDeFormigas/index.js"],"names":["React","useState","P","O","B","MI","M","Feromonios","i","length","h","Math","min","distancia","partida","chegada","dGrau","sqrt","pow","longitude","latitude","d","medirRota","caminho","tempo","posAtual","proxPasso","atribuirFeromonio","evaporarFeromonio","maximoFeromonio","mediaFeromonio","taxaDeEvaporacao","count","escolherProximoPasso","posicaoAtual","possibilidades","includes","push","chanceTotal","chancePossibilidade","feromonio","roleta","random","escolhido","colonia","melhorTempo","melhorCaminho","formiga","proximoPasso","console","log","Colônia","setCaminho","setTempo","show","setShow","setPartida","destino","setDestino","handleChange","A","rota","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { P, O, B, MI, M, Feromonios } from \"../Components/dados\";\n\nfor (var i = 0; i < P.length; i++) {\n  for (var h = 0; h < P.length; h++) {\n    M[i][h] = Math.min(P[i][h], B[i][h], O[i][h]);\n  }\n}\n\nfor (var i = 0; i < P.length; i++) {\n  for (var h = 0; h < P.length; h++) {\n    if (P[i][h] <= B[i][h] && P[i][h] <= O[i][h]) {\n      MI[i][h] = P[i][h] + \"P\";\n    }\n    if (B[i][h] < P[i][h] && B[i][h] <= O[i][h]) {\n      MI[i][h] = B[i][h] + \"B\";\n    }\n    if (O[i][h] < B[i][h] && O[i][h] < P[i][h]) {\n      MI[i][h] = O[i][h] + \"O\";\n    }\n  }\n}\n\n// partida = { latitude: 0, longitude: 1 } chegada = { latitude: 0, longitude: 1 }\nfunction distancia(partida, chegada) {\n  var dGrau = Math.sqrt(\n    Math.pow(partida.longitude + partida.latitude, 2) +\n      Math.pow(chegada.longitude - chegada.latitude, 2)\n  );\n  var d = (40030000 * dGrau) / 360;\n  return d;\n}\n\nfunction medirRota(partida, caminho) {\n  var tempo = 0;\n  var posAtual = partida,\n    proxPasso = caminho[0];\n  tempo += M[posAtual][proxPasso];\n  for (var i = 0; i < caminho.length - 1; i++) {\n    posAtual = proxPasso;\n    proxPasso = caminho[i + 1];\n    tempo += M[posAtual][proxPasso];\n  }\n  return tempo;\n}\n\nfunction atribuirFeromonio(tempo) {\n  return 1 - tempo;\n}\n\nfunction evaporarFeromonio() {\n  var maximoFeromonio = 0;\n  var mediaFeromonio = 0;\n  var taxaDeEvaporacao = 0.05;\n  var count = 0;\n  for (var i = 0; i < Feromonios.length; i++) {\n    for (var h = 0; h < Feromonios[0].length; h++) {\n      maximoFeromonio += Feromonios[i][h];\n      count++;\n    }\n  }\n  mediaFeromonio = maximoFeromonio / count;\n  for (var i = 0; i < Feromonios.length; i++) {\n    for (var h = 0; h < Feromonios[0].length; h++) {\n      Feromonios[i][h] -= mediaFeromonio * taxaDeEvaporacao;\n      if (Feromonios[i][h] < 0) Feromonios[i][h] = 0;\n    }\n  }\n}\n\nfunction escolherProximoPasso(posicaoAtual, caminho) {\n  var possibilidades = [];\n  for (var i = 0; i < M[posicaoAtual].length; i++) {\n    if (i === posicaoAtual || caminho.includes(i)) continue;\n    if (M[posicaoAtual][i] >= 0) {\n      possibilidades.push(i);\n    }\n  }\n  var chanceTotal = 0;\n  var chancePossibilidade = [];\n  for (var i = 0; i < possibilidades.length; i++) {\n    var feromonio = Feromonios[posicaoAtual][possibilidades[i]];\n    if (feromonio <= 0) feromonio = 1;\n    chancePossibilidade.push(chanceTotal + feromonio);\n    chanceTotal += feromonio;\n  }\n  var roleta = Math.random() * chanceTotal;\n  var escolhido = possibilidades[0];\n  for (var i = 0; i < possibilidades.length; i++) {\n    if (roleta < chancePossibilidade[i]) {\n      escolhido = possibilidades[i];\n      break;\n    }\n  }\n  return escolhido;\n}\n\n//indices dos pr�dios\nfunction colonia(partida, chegada) {\n  var melhorTempo = 1000000000;\n  var melhorCaminho = [];\n  for (var formiga = 0; formiga < 50; formiga++) {\n    var posicaoAtual = partida;\n    var caminho = [];\n    while (posicaoAtual !== chegada) {\n      var proximoPasso = escolherProximoPasso(posicaoAtual, caminho);\n      posicaoAtual = proximoPasso;\n      caminho.push(proximoPasso);\n    }\n    var tempo = medirRota(partida, caminho);\n    if (tempo < melhorTempo) {\n      melhorTempo = tempo;\n      melhorCaminho = caminho;\n    }\n    // colocar feromonio\n    var posAtual = posicaoAtual,\n      proxPasso = caminho[0];\n    Feromonios[posAtual][proxPasso] += atribuirFeromonio(tempo);\n    for (var i = 0; i < caminho.length - 1; i++) {\n      posAtual = proxPasso;\n      proxPasso = caminho[i + 1];\n      Feromonios[posAtual][proxPasso] += atribuirFeromonio(tempo);\n    }\n    evaporarFeromonio();\n  }\n  console.log(\n    \"Melhor tempo: \" + melhorTempo + \"\\nMelhor caminho: \" + melhorCaminho\n  );\n  return { melhorTempo, melhorCaminho };\n}\n\nconst Colônia = () => {\n  const [caminho, setCaminho] = useState([]);\n  const [tempo, setTempo] = useState(0);\n  const [show, setShow] = useState(false);\n  const [partida, setPartida] = useState(0);\n  const [destino, setDestino] = useState(0);\n\n  const handleChange = async (A, B) => {\n    const rota = await colonia(A, B);\n\n    setCaminho(rota.melhorCaminho);\n    setTempo(rota.melhorTempo);\n    setShow(true);\n    console.log(caminho, tempo);\n  };\n\n  return (\n    <div>\n      <form>\n        <input\n          type=\"text\"\n          size={20}\n          //   name={partida}\n          onChange={(e) => setPartida(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          size={20}\n          //   name={destino}\n          onChange={(e) => setDestino(e.target.value)}\n        />\n        <button type=\"submit\" onSubmit={() => handleChange(partida, destino)}>\n          {\" \"}\n          Enviar\n        </button>\n      </form>\n\n      {show ? (\n        <div>\n          Caminho: {caminho}\n          Melhor tempo: {tempo}\n        </div>\n      ) : (\n        <div />\n      )}\n    </div>\n  );\n};\n\nexport default Colônia;\n"]},"metadata":{},"sourceType":"module"}